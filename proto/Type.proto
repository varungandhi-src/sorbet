syntax = "proto3";

package com.stripe.rubytyper;

message Type {
    message CompositeType {
        Type left = 1;
        Type right = 2;
    }

    message Applied {
        string symbol_full_name = 1;
        repeated Type type_args = 2;
    }

    message Shape {
        repeated Type keys = 2;
        repeated Type values = 3;
    }

    message Literal {
        enum Kind {
            // Unused, but kept for backwards compatibility (?)
            INTEGER = 0;
            STRING = 1;
            SYMBOL = 2;
            // TRUE = 3;
            // FALSE = 4;
            FLOAT = 5;
        }

        Kind kind = 1;

        oneof type {
            int64 integer = 100;
            string string = 101;
            string symbol = 102;
            bool bool = 103;
            float float = 104;
        }
    }

    message Tuple {
        repeated Type elems = 2;
    }

    message LiteralInteger {
        int64 integer = 1;
    }

    enum Kind {
        // We only currently support simple types, because this is all we need
        // at this time. Others will show up as "UNKNOWN".
        // These values correspond exactly to `Type->kind()`
        UNKNOWN = 0;
        APPLIED = 1;
        CLASS = 2;
        LITERAL = 3;
        SHAPE = 4;
        TUPLE = 5;
        // skip a few
        OR = 10;
        AND = 11;
        // skip some more
        LITERALINTEGER = 13;
    }

    Kind kind = 1;
    
    oneof type {
        string class_full_name = 100;
        CompositeType and = 101;
        CompositeType or = 102;
        Applied applied = 103;
        Shape shape = 104;
        Literal literal = 105;
        Tuple tuple = 106;
        LiteralInteger literalinteger= 107;
    }
}
